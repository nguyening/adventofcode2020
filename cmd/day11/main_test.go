package main

import "testing"
import "github.com/stretchr/testify/assert"

func TestSimulate(t *testing.T) {
	for i, tc := range []struct{
		grid [][]rune
		rule Rule
		want [][]rune
		changed bool
	}{
		{
			grid: [][]rune{
				[]rune("#.##.##.##"),
				[]rune("#######.##"),
				[]rune("#.#.#..#.."),
				[]rune("####.##.##"),
				[]rune("#.##.##.##"),
				[]rune("#.#####.##"),
				[]rune("..#.#....."),
				[]rune("##########"),
				[]rune("#.######.#"),
				[]rune("#.#####.##"),
			},
			rule: PartOneRule,
			want: [][]rune{
				[]rune("#.LL.L#.##"),
				[]rune("#LLLLLL.L#"),
				[]rune("L.L.L..L.."),
				[]rune("#LLL.LL.L#"),
				[]rune("#.LL.LL.LL"),
				[]rune("#.LLLL#.##"),
				[]rune("..L.L....."),
				[]rune("#LLLLLLLL#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#LLLL.##"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.LL.L#.##"),
				[]rune("#LLLLLL.L#"),
				[]rune("L.L.L..L.."),
				[]rune("#LLL.LL.L#"),
				[]rune("#.LL.LL.LL"),
				[]rune("#.LLLL#.##"),
				[]rune("..L.L....."),
				[]rune("#LLLLLLLL#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#LLLL.##"),
			},
			rule: PartOneRule,
			want: [][]rune{
				[]rune("#.##.L#.##"),
				[]rune("#L###LL.L#"),
				[]rune("L.#.#..#.."),
				[]rune("#L##.##.L#"),
				[]rune("#.##.LL.LL"),
				[]rune("#.###L#.##"),
				[]rune("..#.#....."),
				[]rune("#L######L#"),
				[]rune("#.LL###L.L"),
				[]rune("#.#L###.##"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.##.L#.##"),
				[]rune("#L###LL.L#"),
				[]rune("L.#.#..#.."),
				[]rune("#L##.##.L#"),
				[]rune("#.##.LL.LL"),
				[]rune("#.###L#.##"),
				[]rune("..#.#....."),
				[]rune("#L######L#"),
				[]rune("#.LL###L.L"),
				[]rune("#.#L###.##"),
			},
			rule: PartOneRule,
			want: [][]rune{
				[]rune("#.#L.L#.##"),
				[]rune("#LLL#LL.L#"),
				[]rune("L.L.L..#.."),
				[]rune("#LLL.##.L#"),
				[]rune("#.LL.LL.LL"),
				[]rune("#.LL#L#.##"),
				[]rune("..L.L....."),
				[]rune("#L#LLLL#L#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#L#L#.##"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.#L.L#.##"),
				[]rune("#LLL#LL.L#"),
				[]rune("L.L.L..#.."),
				[]rune("#LLL.##.L#"),
				[]rune("#.LL.LL.LL"),
				[]rune("#.LL#L#.##"),
				[]rune("..L.L....."),
				[]rune("#L#LLLL#L#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#L#L#.##"),
			},
			rule: PartOneRule,
			want: [][]rune{
				[]rune("#.#L.L#.##"),
				[]rune("#LLL#LL.L#"),
				[]rune("L.#.L..#.."),
				[]rune("#L##.##.L#"),
				[]rune("#.#L.LL.LL"),
				[]rune("#.#L#L#.##"),
				[]rune("..L.L....."),
				[]rune("#L#L##L#L#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#L#L#.##"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.#L.L#.##"),
				[]rune("#LLL#LL.L#"),
				[]rune("L.#.L..#.."),
				[]rune("#L##.##.L#"),
				[]rune("#.#L.LL.LL"),
				[]rune("#.#L#L#.##"),
				[]rune("..L.L....."),
				[]rune("#L#L##L#L#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#L#L#.##"),
			},
			rule: PartOneRule,
			want: [][]rune{
				[]rune("#.#L.L#.##"),
				[]rune("#LLL#LL.L#"),
				[]rune("L.#.L..#.."),
				[]rune("#L##.##.L#"),
				[]rune("#.#L.LL.LL"),
				[]rune("#.#L#L#.##"),
				[]rune("..L.L....."),
				[]rune("#L#L##L#L#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.#L#L#.##"),
			},
			changed: false,
		},
		{
			grid: [][]rune{
				[]rune("L.LL.LL.LL"),
				[]rune("LLLLLLL.LL"),
				[]rune("L.L.L..L.."),
				[]rune("LLLL.LL.LL"),
				[]rune("L.LL.LL.LL"),
				[]rune("L.LLLLL.LL"),
				[]rune("..L.L....."),
				[]rune("LLLLLLLLLL"),
				[]rune("L.LLLLLL.L"),
				[]rune("L.LLLLL.LL"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.##.##.##"),
				[]rune("#######.##"),
				[]rune("#.#.#..#.."),
				[]rune("####.##.##"),
				[]rune("#.##.##.##"),
				[]rune("#.#####.##"),
				[]rune("..#.#....."),
				[]rune("##########"),
				[]rune("#.######.#"),
				[]rune("#.#####.##"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.##.##.##"),
				[]rune("#######.##"),
				[]rune("#.#.#..#.."),
				[]rune("####.##.##"),
				[]rune("#.##.##.##"),
				[]rune("#.#####.##"),
				[]rune("..#.#....."),
				[]rune("##########"),
				[]rune("#.######.#"),
				[]rune("#.#####.##"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.LL.LL.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..L.."),
				[]rune("LLLL.LL.LL"),
				[]rune("L.LL.LL.LL"),
				[]rune("L.LLLLL.LL"),
				[]rune("..L.L....."),
				[]rune("LLLLLLLLL#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.LLLLL.L#"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.LL.LL.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..L.."),
				[]rune("LLLL.LL.LL"),
				[]rune("L.LL.LL.LL"),
				[]rune("L.LLLLL.LL"),
				[]rune("..L.L....."),
				[]rune("LLLLLLLLL#"),
				[]rune("#.LLLLLL.L"),
				[]rune("#.LLLLL.L#"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.L#.##.L#"),
				[]rune("#L#####.LL"),
				[]rune("L.#.#..#.."),
				[]rune("##L#.##.##"),
				[]rune("#.##.#L.##"),
				[]rune("#.#####.#L"),
				[]rune("..#.#....."),
				[]rune("LLL####LL#"),
				[]rune("#.L#####.L"),
				[]rune("#.L####.L#"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.L#.##.L#"),
				[]rune("#L#####.LL"),
				[]rune("L.#.#..#.."),
				[]rune("##L#.##.##"),
				[]rune("#.##.#L.##"),
				[]rune("#.#####.#L"),
				[]rune("..#.#....."),
				[]rune("LLL####LL#"),
				[]rune("#.L#####.L"),
				[]rune("#.L####.L#"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##LL.LL.L#"),
				[]rune("L.LL.LL.L#"),
				[]rune("#.LLLLL.LL"),
				[]rune("..L.L....."),
				[]rune("LLLLLLLLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##LL.LL.L#"),
				[]rune("L.LL.LL.L#"),
				[]rune("#.LLLLL.LL"),
				[]rune("..L.L....."),
				[]rune("LLLLLLLLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##L#.#L.L#"),
				[]rune("L.L#.#L.L#"),
				[]rune("#.L####.LL"),
				[]rune("..#.#....."),
				[]rune("LLL###LLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##L#.#L.L#"),
				[]rune("L.L#.#L.L#"),
				[]rune("#.L####.LL"),
				[]rune("..#.#....."),
				[]rune("LLL###LLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##L#.#L.L#"),
				[]rune("L.L#.LL.L#"),
				[]rune("#.LLLL#.LL"),
				[]rune("..#.L....."),
				[]rune("LLL###LLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			changed: true,
		},
		{
			grid: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##L#.#L.L#"),
				[]rune("L.L#.LL.L#"),
				[]rune("#.LLLL#.LL"),
				[]rune("..#.L....."),
				[]rune("LLL###LLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			rule: PartTwoRule,
			want: [][]rune{
				[]rune("#.L#.L#.L#"),
				[]rune("#LLLLLL.LL"),
				[]rune("L.L.L..#.."),
				[]rune("##L#.#L.L#"),
				[]rune("L.L#.LL.L#"),
				[]rune("#.LLLL#.LL"),
				[]rune("..#.L....."),
				[]rune("LLL###LLL#"),
				[]rune("#.LLLLL#.L"),
				[]rune("#.L#LL#.L#"),
			},
			changed: false,
		},
	} {
		gotgrid, gotchanged := Simulate(tc.grid, tc.rule)
		assert.Equalf(t, gotgrid, tc.want, "#%d incorrect got grid", i)

		if gotchanged != tc.changed {
			t.Errorf("#%d got %t want %t", i, gotchanged, tc.changed)
		}
	}
}

func TestVisibleOccupiedPartTwo(t *testing.T) {
	for i, tc := range []struct{
		grid [][]rune
		r, c int
		want int
	}{
		{
			grid: [][]rune{
				[]rune(".......#."),
				[]rune("...#....."),
				[]rune(".#......."),
				[]rune("........."),
				[]rune("..#L....#"),
				[]rune("....#...."),
				[]rune("........."),
				[]rune("#........"),
				[]rune("...#....."),

			},
			r: 4,
			c: 3, 
			want: 8,
		},
		{
			grid: [][]rune{
				[]rune("............."),
				[]rune(".L.L.#.#.#.#."),
				[]rune("............."),
			},
			r: 1,
			c: 1,
			want: 0,
		},
		{
			grid: [][]rune{
				[]rune(".##.##."),
				[]rune("#.#.#.#"),
				[]rune("##...##"),
				[]rune("...L..."),
				[]rune("##...##"),
				[]rune("#.#.#.#"),
				[]rune(".##.##."),
			},

			r: 3,
			c: 3,
			want: 0,
		},
	} {
		if got := VisibleOccupiedPartTwo(tc.grid, tc.r, tc.c); got != tc.want {
			t.Errorf("#%d got %d want %d", i, got, tc.want)
		}
	}
}
